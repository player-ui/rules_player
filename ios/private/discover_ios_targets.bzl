"""
iOS target discovery macro that creates an sh_binary to run the script.
Generated with Cursor by Koriann South on August 29, 2025
"""

def discover_ios_targets(
        name,
        output = "ios_targets.bzl",
        variable_name = "sources"):
    """Automatically generate `sources` for `assemble_package`.

    > [!NOTE]
    > This will discover Swift targets created by `ios_pipeline` and their corresponding JS "core_native_bundle"s.
    > If you need any other files, you will need to manually supply those to `assemble_package`.

    This macro creates an sh_binary that directly executes the discover_ios_targets.sh script.
    The discovery script automatically finds all Swift source targets with iOS tags and
    JS native bundles in your workspace, then pairs them appropriately.

    The script automatically:

    - Finds all Swift source targets ending in "_Sources". I.e. all sources generated by `ios_pipeline`.
    - Identifies corresponding JS native bundles. I.e. `core_native_bundle` targets.
    - Pairs them when both exist in the same directory
    - Generates clean BUILD-ready Starlark code

    Basic Example:
    ```python
    # In your BUILD file
    load("@rules_player//ios:defs.bzl", "discover_ios_targets", "assemble_package")

    # Create the discovery rule
    discover_ios_targets(name = "discover")

    # Run discovery to generate ios_targets.bzl
    # $ bazel run //:discover

    # Load the generated sources
    load(":ios_targets.bzl", "sources")

    # Use with assemble_package
    assemble_package(
        name = "ios_package",
        package_swift = "Package.swift",
        sources = sources,
    )
    ```

    Advanced Example:
    ```python
    # Custom output file and variable name
    discover_ios_targets(
        name = "discover_ios_sources",
        output = "my_ios_targets.bzl",
        variable_name = "custom_sources",
    )

    # Load the custom variable
    load(":my_ios_targets.bzl", "custom_sources")

    assemble_package(
        name = "spm_publish_zip",
        package_swift = "//:Package.swift",
        sources = custom_sources,
    )
    ```

    Args:
        name: Name of the sh_binary target to create
        output: The file the ios targets will be written to (default: "ios_targets.bzl")
        variable_name: Name of the variable to create in the .bzl file (default: "sources")
    """

    native.sh_binary(
        name = name,
        srcs = ["@rules_player//ios/private:discover_ios_targets.sh"],
        data = [],
        args = [output, variable_name],
    )
